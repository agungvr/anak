name:

on:
  push:
    branches:
      - main
  pull_request:

env:
  HUSKY: 0

jobs:
  main:
    permissions:
      packages: write
      contents: read
      actions: write
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    strategy:
      matrix:
        node-version: [16]
        npm-version: [8]
    steps:
      - name: Checkout [Pull Request]
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.WEW_TOKEN }}
          fetch-depth: 0

      - name: Checkout [Default Branch]
        uses: actions/checkout@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          token: ${{ secrets.WEW_TOKEN }}
          fetch-depth: 0

      - name: Nx set SHAs
        uses: nrwl/nx-set-shas@v3

      - name: Detect package manager
        id: package_manager
        run: |
          echo "::set-output name=name::$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")"

      - name: Set node/npm versions using volta
        uses: volta-cli/action@v4
        with:
          node-version: '${{ matrix.node-version }}'
          npm-version: '${{ matrix.npm-version }}'

      - name: Print node/npm versions
        id: versions
        run: |
          node_ver=$( node --version )     
          echo "Node: ${node_ver:1}"
          echo "NPM: $(npm --version )"
          echo "::set-output name=node_version::${node_ver:1}"

      - name: Use the node_modules cache if available [npm]
        if: steps.package_manager.outputs.name == 'npm'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Install dependencies
        run: |
          echo "Running npm ci"
          npm ci

      - run: |
          npx nx workspace-lint
          npx nx format:check
          npx nx affected --target lint --parallel 3
          npx nx affected --target test --parallel 3 --ci --code-coverage
          npx nx affected --target build --parallel 3

      - name: Release
        if: ${{ success() && (github.event_name != 'pull_request' || github.event.action == 'closed' && github.event.pull_request.merged == true) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.WEW_TOKEN }}
          NPM_TOKEN: ${{ secrets.WEW_TOKEN }}
        run: |
          npx nx affected --target release --all
          npx semantic-release-plus
